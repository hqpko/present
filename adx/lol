首先, 非常感谢大家愿意在百忙之中抽出一个小时和我一起探讨一些技术问题, 特别是我这个普通话讲得非常不好, 大家听着也辛苦.

可以做个技术分享, 我要特别感谢老崔, 因为这个分享基本上是在讲 adx 里面存在的问题, 而 adx 一半以上的工作都是老崔做的.
既然老崔给我这么一个机会, 那我就就事论事, 只讨论技术, 不针对个人, 希望老崔听了不要不开心, 其他同事也不要不开心,
我们大家的目标都是一致的, 就是想一起努力把平台做好.

我们只是讨论, 说的只代表个人观点, 不一定正确, 一会我讲完之后, 大家有不认同的, 提出来, 我们一起探讨, 大概也就讲20来分钟, 
中间大家就不要问问题了, 我在这么多人面前讲话是会紧张的, 有人问问题我一紧张就不记得自己要讲什么了.

没问题我们就开始吧.

这个分享, 实际上不是讲 go 有什么优点, 怎么怎么样, 这些相信老崔上周已经给你们讲过了, 网络上也有很多这方面的介绍.
我就不重复了.

我承认我是有点标题党, 但这确实是我未来一两个月想达到的目标, 就是解放老崔, 实际上相当于提高我们整组人的效率, 甚至还能减轻其他同事的压力.

在开发方面老崔的责任特别重大, 什么都要做. 

我的目标是做到让老崔只需要写代码, 偶尔审核一下代码.

造成老崔如此责任重大的原因是, adx 项目有些问题.

这里我列出了几个问题, 都是很critical的问题, 就是说我认为必须要解决的, 虽然说技术上是完全可行而且成本非常低, 只要给我这个机会, 我就能把它全解决了. 但是有些东西也不是我一个小小工程师能决定的.

我们一个一个讲这些问题.

缺乏依赖管理, 这个问题可以说是 go 官方的问题, 也可以说是我们自己的问题, 但可能也不是我们工程师的问题.

为什么说是 go 官方的问题, 因为 go 官方一直都没有什么好的依赖管理工具, go get 是不科学的, 为什么不科学, 大家肯定都明白, 不需要我解释.

那为什么也可以说是我们自己的问题, 因为大概在三年前, go1.1 1.2 的时代就已经开始有一些第三方的依赖管理工具, 比如说我一直都在用的 godep.

为什么说可能也不是我们工程师的问题, 因为那些工具都不支持 gitlab, 我实在想不到什么好办法在 gitlab 里面做依赖管理.

没有持续集成, 实际上就是把很多应该自动化的东西, 留给我们开发者自己做. 这样子, 老崔审核代码的压力就非常大. 因为实际上一些根本不正确的代码也交给老崔来审查, 而这些东西都是可以被持续集成过滤掉的. 代码审查, 初衷是保证代码质量, 而不是用来检查一些非常低级的错误. 比方说我提交的第一个 pull request, 连编译都过不了, 我也提交了, 因为我习惯了随意提交 pull request, 因为持续集成不会让我的代码通过, 这样我指定的审核人就不需要浪费时间去看我这个错误的代码.

当然, 持续集成不仅仅是这么一个用处, 它可以做很多事情, 比如说如果我们用 docker 来部署, 那我们可以指定当代码提交到 production 或者 staging 分支的时候, 可以在上面运行 docker build 把 docker image 给弄出来, 然后提交到 docker hub 上面. 还有很多优点, 有机会我们可以探讨.

另外一个问题就是缺乏测试. 这里特指单元测试, 没有单元测试测试, 我根本不知道我改的某一行代码, 对某个模块有没有影响, 甚至对整个系统有没有影响.
